* 简介
  + 参考文档
    [[http://blog.csdn.net/loongembedded/article/details/51442241][android sensor架构]]
    [[http://blog.csdn.net/kevinx_xu/article/details/9180171][转G-sensor 架构分析]]
  + *CODE:* hardware/qcom/sensors
    hardware/libhardware/include/hardware/sensors.h
    hardware/qcom
** 手机sensor类别
   *加速度传感器 (accelerometer)*
   *磁力传感器(magnetic field)*
   *方向传感器(orientation)*
   *陀螺仪(gyroscope)*
   *环境光照传感器(light)*
   *压力传感器(pressure)*
   *温度传感器(temperature)*
   *距离传感器(proximity)*
   *重力传感器(gravity)*
   + 工具: *android sensor box*
* sysfs
  *sysfs* /sys/class/sensors/xx
  *input* /sys/class/input
          /dev/input/eventX
* 关键结构体
** sensors_module_t
   传感器结构体
   #+begin_src cpp
   struct sensors_module_t {
        struct hw_module_t common;

        /*获取传感器列表,返回列表传感器的数量*/
        int (*get_sensors_list)(struct sensors_module_t* module,
                struct sensor_t const** list);

        /*设置传感器操作模式
          0 -正常操作模式，模块默认模式
          1 -回环模式,在此模式下,传感器服务为支持的传感器注入数据
          @return 0 成功
                 -EINVAL:模式不支持
                 -EPERM:不允许操作
        */
        int (*set_operation_mode)(unsigned int mode);
    };
   #+end_src
** hw_module_t
   #+begin_src cpp
   typedef struct hw_module_t {
       /*标签必须初始化为HARDWARE_MODULE_TAG*/
       uint32_t tag;
       uint16_t module_api_version;
   #define version_major module_api_version
       uint16_t hal_api_version;
   #define version_minor hal_api_version

       /*模块标识符*/
       const char *id;
       
       /*模块名*/
       const char *name;
       
       /**模块的作者/所有者/实现者*/
       const char *author;
       
       /*模块方法*/
       struct hw_module_methods_t* methods;//open方法
       
       /** module's dso */
       void* dso; //动态库句柄,用dlopen()打开*.so产生的句柄
   }
   #+end_src
**  sensor_t
   表示传感器
   #+begin_src cpp
   struct sensor_t {

        /* Name of this sensor.
         * All sensors of the same "type" must have a different "name".
         */
        const char*     name;/*传感器名,相同类型的传感器名字必须不同*/

        /*硬件部分的供应商*/
        const char*     vendor;

        /*版本号*/
        int             version;

        /*传感器句柄,根据这个句柄确定是哪个struct sensor_t*/
        /*这个函数中用到getInfoByHandle*/
        int             handle;

        /*传感器类型*/
        int             type;

        /*传感器值的最大范围*/
        float           maxRange;

        /*传感器报告两值之间的最小差值*/
        float           resolution;

        /*传感器的功耗(ma)*/
        float           power;

        /* this value depends on the reporting mode:
         *
         *   continuous: minimum sample period allowed in microseconds
         *   on-change : 0
         *   one-shot  :-1
         *   special   : 0, unless otherwise noted
         */
        int32_t         minDelay;

        /* number of events reserved for this sensor in the batch mode FIFO.
         * If there is a dedicated FIFO for this sensor, then this is the
         * size of this FIFO. If the FIFO is shared with other sensors,
         * this is the size reserved for that sensor and it can be zero.
         */
        uint32_t        fifoReservedEventCount;

        /* maximum number of events of this sensor that could be batched.
         * This is especially relevant when the FIFO is shared between
         * several sensors; this value is then set to the size of that FIFO.
         */
        uint32_t        fifoMaxEventCount;

        /* type of this sensor as a string. Set to corresponding
         * SENSOR_STRING_TYPE_*.
         * When defining an OEM specific sensor or sensor manufacturer specific
         * sensor, use your reserve domain name as a prefix.
         * ex: com.google.glass.onheaddetector
         * For sensors of known type, the android framework might overwrite this
         * string automatically.
         */
        const char*    stringType;

        /* permission required to see this sensor, register to it and receive data.
         * Set to "" if no permission is required. Some sensor types like the
         * heart rate monitor have a mandatory require_permission.
         * For sensors that always require a specific permission, like the heart
         * rate monitor, the android framework might overwrite this string
         * automatically.
         */
        const char*    requiredPermission;

        /* This value is defined only for continuous mode and on-change sensors. It is the delay between
         * two sensor events corresponding to the lowest frequency that this sensor supports. When lower
         * frequencies are requested through batch()/setDelay() the events will be generated at this
         * frequency instead. It can be used by the framework or applications to estimate when the batch
         * FIFO may be full.
         *
         * NOTE: 1) period_ns is in nanoseconds where as maxDelay/minDelay are in microseconds.
         *              continuous, on-change: maximum sampling period allowed in microseconds.
         *              one-shot, special : 0
         *   2) maxDelay should always fit within a 32 bit signed integer. It is declared as 64 bit
         *      on 64 bit architectures only for binary compatibility reasons.
         * Availability: SENSORS_DEVICE_API_VERSION_1_3
         */
        #ifdef __LP64__
           int64_t maxDelay;
        #else
           int32_t maxDelay;
        #endif

        /* Flags for sensor. See SENSOR_FLAG_* above. Only the least significant 32 bits are used here.
         * It is declared as 64 bit on 64 bit architectures only for binary compatibility reasons.
         * Availability: SENSORS_DEVICE_API_VERSION_1_3
         */
        #ifdef __LP64__
           uint64_t flags;
        #else
           uint32_t flags;
        #endif

        /* reserved fields, must be zero */
        void*           reserved[2];
    };
   #+end_src
** sensors_event_t
   传感器的数据结构体
   #+begin_src cpp
   typedef struct sensors_event_t {
        /* must be sizeof(struct sensors_event_t) */
        int32_t version;

        /*传感器标识符*/
        int32_t sensor;

        /*传感器类型*/
        int32_t type;

        /* 保留:没用 */
        int32_t reserved0;

        /*时间戳:以纳秒为单位*/
        int64_t timestamp;

        union {
            union {
                float           data[16];

                /*加速度值 单位m/s^2*/
                sensors_vec_t   acceleration;

                /*磁矢量值以微特斯拉（uT）*/
                sensors_vec_t   magnetic;

                /* orientation values are in degrees */
                /*方向值 单位度*/
                sensors_vec_t   orientation;

                /*陀螺仪值  单位rad/s*/
                sensors_vec_t   gyro;

                /*温度 单位摄氏度（℃）*/
                float           temperature;

                /*距离 单位厘米*/
                float           distance;

                /*光 国际单位(SI):lux(勒克斯)*/
                float           light;

                /* pressure in hectopascal (hPa) */
                /*压强 单位:hPa(百帕斯卡)*/
                float           pressure;

                /*相对湿度百分比*/
                float           relative_humidity;

                /*未校准的陀螺仪值以 rad/s */
                uncalibrated_event_t uncalibrated_gyro;

                /*未校准磁力计值以微特斯拉*/
                uncalibrated_event_t uncalibrated_magnetic;

                /*心率数据包含bpm中的值和状态*/
                heart_rate_event_t heart_rate;

                /* this is a special event. see SENSOR_TYPE_META_DATA above.
                 * sensors_meta_data_event_t events are all reported with a type of
                 * SENSOR_TYPE_META_DATA. The handle is ignored and must be zero.
                 */
                meta_data_event_t meta_data;

                /*动态传感器元事件。请参见SENSOR_TYPE_DYNAMIC_SENSOR_META类型*/
                dynamic_sensor_meta_event_t dynamic_sensor_meta;

                /*
                 * special additional sensor information frame, see
                 * SENSOR_TYPE_ADDITIONAL_INFO for details.
                 */
                additional_info_event_t additional_info;
            };

            union {
                uint64_t        data[8];

                /* step-counter */
                uint64_t        step_counter;
            } u64;
        };

        /* Reserved flags for internal use. Set to zero. */
        uint32_t flags;

        uint32_t reserved1[3];
    } sensors_event_t;
   #+end_src
** sensors_poll_device_t
   #+begin_src cpp
   struct sensors_poll_device_t {
        struct hw_device_t common; //
        int (*activate)(struct sensors_poll_device_t *dev, int sensor_handle, int enabled);
        int (*setDelay)(struct sensors_poll_device_t *dev, int sensor_handle, int64_t sampling_period_ns);
        /*获取底层数据*/
        int (*poll)(struct sensors_poll_device_t *dev, sensors_event_t* data, int count);
    };
   #+end_src
** hw_device_t
   #+begin_src cpp
   typedef struct hw_device_t {
        /*标签必须初始化为 HARDWARE_DEVICE_TAG*/
        uint32_t tag;
         
        /*模块版本,有特殊作用*/
        uint32_t version;

        /*该设备所属模块的引用*/
        struct hw_module_t* module;

        /** padding reserved for future use */
    #ifdef __LP64__
        uint64_t reserved[12];
    #else
        uint32_t reserved[12];
    #endif

        /*关闭这个设备*/
        int (*close)(struct hw_device_t* device);

    } hw_device_t;
   #+end_src
** hw_module_methods_t
   *功能*:硬件抽象层方法
   #+begin_src cpp
   typedef struct hw_module_methods_t {
        /*打开特定设备*/
        int (*open)(const struct hw_module_t* module, const char* id, struct hw_device_t** device);

    } hw_module_methods_t;
   #+end_src
** sensors_poll_context_t
   #+begin_src cpp
   struct sensors_poll_context_t {
      // extension for sensors_poll_device_1, must be first
      struct sensors_poll_device_1_ext_t device;// must be first
      sensors_poll_context_t();
      ~sensors_poll_context_t();
      int activate(int handle, int enabled);
      int setDelay(int handle, int64_t ns);
      int pollEvents(sensors_event_t* data, int count);
      int calibrate(int handle, cal_cmd_t *para);
      int batch(int handle, int sample_ns, int latency_ns);
      int flush(int handle);

    private:
      static const size_t wake = MAX_SENSORS;
      static const char WAKE_MESSAGE = 'W';
      struct pollfd mPollFds[MAX_SENSORS+1];
      int mWritePipeFd;
      SensorBase* mSensors[MAX_SENSORS];
      mutable Mutex mLock;
    };
   #+end_src
*** sensors_poll_device_1_ext_t
    #+begin_src cpp
    struct sensors_poll_device_1_ext_t {
        union {

            struct sensors_poll_device_1 aosp;
            struct {
                struct hw_device_t common;
                int (*activate)(struct sensors_poll_device_t *dev, int handle, int enabled);
                int (*setDelay)(struct sensors_poll_device_t *dev, int handle, int64_t period_ns);
                int (*poll)(struct sensors_poll_device_t *dev, sensors_event_t* data, int count);
                int (*batch)(struct sensors_poll_device_1* dev, int handle, int flags, int64_t period_ns, int64_t timeout);
                int (*flush)(struct sensors_poll_device_1* dev, int handle);
                void (*reserved_procs[8])(void);
            };
        };

        /* return -1 on error. Otherwise return the calibration result */
        int (*calibrate)(struct sensors_poll_device_1_ext_t *dev, int handle, struct cal_cmd_t *para);
    };
    #+end_src
** SensorConterxt
   #+begin_src cpp
   struct SensorContext {
      char   name[SYSFS_MAXLEN]; // 传感器名
      char   vendor[SYSFS_MAXLEN]; // 传感器厂家
      char   enable_path[PATH_MAX]; //传感器控制路径
      char   data_path[PATH_MAX]; //获取传感器事件的数据路径

      struct sensor_t *sensor; //指向传感器列表的sensor_t结构体
      SensorBase     *driver; //指向传感器驱动程序实例

      int data_fd; //数据设备节点的文件描述符
      int enable; //指示传感器是否启用
      bool is_virtual; //指示这是否是虚拟传感器
      int64_t delay_ns; //此传感器的轮询延迟设置
      int64_t latency_ns; //此传感器的最大报告延迟
      struct listnode dep_list; //该传感器所需的背景传感器类型

      struct listnode listener; //这个传感器的listener的头
    };
   #+end_src
* 关键函数
** dlopen()
   打开一个动态链接库,并返回动态链接库的句柄
** dlsym()
   根据动态链接库操作句柄与符号,返回符号对应的地址,(函数/变量地址)
* Nusensors.cpp  
  hardware/libhardware/include/hardware/hardware.c

  hw_get_module() -> hw_get_module_by_class() -> hw_module_exists()        -> load
                                            判断sensors.msm8952.so是否存在  加载文件,并匹配
       ||                                        
       \/
  sensors_open()  -> module->methods->open()
                        
       ||
       \/
  module->get_sensors_list() ->module__get_sensors_list()
  获取传感器列表
* HAL
** hal层中对应驱动层的一些方法
   #+begin_src cpp
   virtual int readEvents(sensors_event_t* data, int count) = 0;
	 virtual int injectEvents(sensors_event_t* data, int count);
	 virtual bool hasPendingEvents() const;
	 virtual int getFd();
   /*设置延时,对应的设备节点/sys/class/sensors/virtual-proximity/poll_delay*/
	 virtual int setDelay(int32_t handle, int64_t ns);
   /*传感器控制开关,/sys/class/sensors/virtual-proximity/enable*/
	 virtual int enable(int32_t handle, int enabled);
	 virtual int calibrate(int32_t handle, struct cal_cmd_t *para, struct cal_result_t *cal_result);
	 virtual int initCalibrate(int32_t handle, struct cal_result_t *cal_result);
	 virtual int setLatency(int32_t handle, int64_t ns);
	 virtual int flush(int32_t handle);
   #+end_src
** Sensors.cpp
   #+begin_src cpp
   //获取NativeSensorManager对象实例的一个方法
   NativeSensorManager& sm(NativeSensorManager::getInstance());
   #+end_src
** NativeSensorManager.cpp
   #+begin_src cpp
   //根据传感器句柄获取传感器上下文变量(struct SensorContext)
   list = getInfoByHandle(handle);
   #+end_src
* virtual proximity sensor log
  #+begin_src cpp
  #+end_src
* 总结 
  高通中的sensors的Hal层(hardware/qcom/sensors/)通过Sensors.cpp为native层提
  供一个统一的API,然后调用NativeSensorManager.cpp中提供的API,NativeSensorManager.cpp
  再调用ProximitySensor.cpp *注意*:本结论是基于TP虚拟出的距离传感器的到的结论
  #+begin_src cpp
  native
    ||
    \/
  HAL层 API (->  Sensors.cpp ->  NativeSensorManager.cpp -> ProximitySensor.cpp)
    ||
    \/
  driver层中的设备节点(TP驱动代码ft5x06_ts.c和sesors框架代码:sensors_class.c)
  #+end_src
