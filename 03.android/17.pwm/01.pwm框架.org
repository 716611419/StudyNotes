* 简介
  linux内核中的PWM子系统分为两部分,pwm核心(core.c)框架,硬件相关(pwm_xx.c)
* pwm核心
** 总结
   + *Code*:\\
     kernel/drivers/pwm/core.c\\
     kernel/include/linux/pwm.h\\
   + *dts*:
   + *docs*:
   + *sysfs*:\\
     *sysfs*:\\
     *debugfs*:/sys/kernel/debug/pwm\\
     *proc*:\\
/home/wildbook/Code/gflip2_h5_lf11/kernel/include/linux/fb.h
** 结构体
   #+begin_src c
     struct pwm_device {
         const char		*label;     /*pwm设备标签*/
         unsigned long		flags;  /**/
         unsigned int		hwpwm;  /**/
         unsigned int		pwm;    /*pwm的编号*/
         struct pwm_chip		*chip;  /*pwm芯片组*/
         void			*chip_data; /*芯片组私有数据*/

         unsigned int		period; /* pwm周期,单位纳秒 */
     };

     /**
      * struct pwm_ops - PWM控制器操作
      * @request: optional hook for requesting a PWM 用于请求PWM的可选钩
      * @free: optional hook for freeing a PWM 释放PWM的可选钩
      * @config: 配置PWM的占空比和周期长度
      * @set_polarity: 配置此PWM的极性
      * @enable: 使能PWM输出切换
      * @disable: 禁止PWM输出切换
      * @dbg_show:可选例程来显示debugfs中的内容
      * @owner: helps prevent removal of modules exporting active PWMs
      */
     struct pwm_ops {
         int			(*request)(struct pwm_chip *chip,
                                struct pwm_device *pwm);
         void			(*free)(struct pwm_chip *chip,
                                 struct pwm_device *pwm);
         int			(*config)(struct pwm_chip *chip,
                               struct pwm_device *pwm,
                               int duty_ns, int period_ns);
         int			(*set_polarity)(struct pwm_chip *chip,
                                     struct pwm_device *pwm,
                                     enum pwm_polarity polarity);
         int			(*enable)(struct pwm_chip *chip,
                               struct pwm_device *pwm);
         void			(*disable)(struct pwm_chip *chip,
                                    struct pwm_device *pwm);
     #ifdef CONFIG_DEBUG_FS
         void			(*dbg_show)(struct pwm_chip *chip,
                                     struct seq_file *s);
     #endif
         struct module		*owner;
     };

     /**
      * struct pwm_chip - 抽象一个PWM控制器
      * @dev: 提供PWMs的设备
      * @list: 列表节点供内部使用
      * @ops: 这个PWM控制器的回调
      * @base: 该芯片控制的第一个PWM的数量
      * @npwm: 该芯片控制的PWM数量
      * @pwms: 由框架分配的PWM设备数组
      * @can_sleep:如果.config(),.enable()或者.disable()操作休眠，则必须为true
      */
     struct pwm_chip {
         struct device		*dev;
         struct list_head	list;
         const struct pwm_ops	*ops;
         int			base;
         unsigned int		npwm;

         struct pwm_device	*pwms;

   	  struct pwm_device *	(*of_xlate)(struct pwm_chip *pc,
                                         const struct of_phandle_args *args);
   	  unsigned int		of_pwm_n_cells;
   	  bool			can_sleep;
     };
   #+end_src
** pwm核心提供的API
   1. 注册/注销PWM芯片组(PWM chip)
      #+begin_src c
        /**
         * pwmchip_add() - 注册一个新的PWM芯片组(PWM chip)
         * @chip: 要被添加的PWM芯片组
         * 注册一个新的PWM芯片.如果chip-> base <0,则将使用动态分配的base.
         */
        int pwmchip_add(struct pwm_chip *chip)

        /**
         * pwmchip_remove() - 注销一个PWM芯片组
         * @chip: 要被注销的芯片组
         * 注销一个PWM芯片.如果PWM芯片组提供仍然请求的PWM器件，则此功能可能会返回忙.
         */
        int pwmchip_remove(struct pwm_chip *chip)
      #+end_src
   2. 申请/释放PWM设备
      #+begin_src c
        /**
         * pwm_request() - request a PWM device
         * @pwm_id: global PWM device index(全局PWM设备索引)
         * @label: PWM device label(PWM设备标签)
         *
         * 此函数已弃用，请改用pwm_get()
         */
        struct pwm_device *pwm_request(int pwm_id, const char *label);

        /**
         * pwm_free() - 释放PWM设备
         * @pwm: 被释放的PWM设备
         *
         * 此函数已弃用，请改用pwm_put()
         */
        void pwm_free(struct pwm_device *pwm);

        /**
         * pwm_get() - 查找并请求一个PWM设备
         * @dev: 使用PWM的设备
         * @con_id: 使用者名称
         *
         * 先从设备树中查找，再从pwm链表(看pwm_add_table)中查找
         */
        struct pwm_device *pwm_get(struct device *dev, const char *con_id)

        /**
         * pwm_put() - 释放一个PWM设备
         * @pwm: PWM device
         */
        void pwm_put(struct pwm_device *pwm)

        /**
         * devm_pwm_get() - 资源管理pwm_get()
         * @dev: 使用PWM的设备
         * @con_id: 使用者名称
         *
         * 该功能类似于pwm_get(),但是获取的PWM设备将在驱动程序分离时自动释放.
         */
        struct pwm_device *devm_pwm_get(struct device *dev, const char *con_id)

        /**
         * devm_pwm_put() - 资源管理 pwm_put()
         * @dev: 使用PWM的设备
         * @pwm: PWM设备
         * 释放之前使用devm_pwm_get()分配的PWM设备. 通常不需要调用此函数,
         * 因为devm分配的资源会在驱动程序分离时自动释放.
         */
         void devm_pwm_put(struct device *dev, struct pwm_device *pwm)

        /**
         * pwm_request_from_chip() - 从PWM芯片请求PWM设备
         * @chip: PWM chip(PWM设备芯片)
         * @index:被申请的pwm设备的chip的索引号
         * @label: 该PWM的文字描述字符串
         *
         * 返回PWM chip对应index的PWM设备.
         * 如果索引对于指定的PWM芯片无效，或者不能请求PWM器件，则返回负错误代码.
         */
        struct pwm_device *pwm_request_from_chip(struct pwm_chip *chip,
                                                 unsigned int index,
                                                 const char *label)

        /**
         * of_pwm_get() - 通过PWM框架请求PWM
         * @np: 从设备节点中获取设备
         * @con_id: 使用者名称
         *
         * 返回从设备树节点的“pwms”属性中指定的phandle和索引解析的PWM设备或失败时的负
         * 错误代码。 从设备树解析的值存储在返回的PWM设备对象中。
         *
         * 如果con_id为NULL,返回pwm列表中第一个设备,否则根据con_id进行查找pwm设备
         */
        struct pwm_device *of_pwm_get(struct device_node *np, const char *con_id)

        /**
         * devm_of_pwm_get() - 资源管理of_pwm_get()
         * @dev: 使用PWM的设备
         * @np: 从设备节点中获取设备
         * @con_id: 使用者名称
         *
         * 该功能类似于of_pwm_get(),但是获取的PWM设备将在驱动程序分离时自动释放.
         */
        struct pwm_device *devm_of_pwm_get(struct device *dev,
                                           struct device_node *np,
                                           const char *con_id)
      #+end_src
   3. 获取/设置私有数据
      #+begin_src c
        /**
         ,* pwm_get_chip_data() - 获得一个PWM的私有芯片数据(chip data)
         ,* @pwm: PWM 设备
         ,*/
        void *pwm_get_chip_data(struct pwm_device *pwm)

        /**
         ,* pwm_set_chip_data() - 为一个PWM设备设置私有芯片数据(chip data)
         ,* @pwm: PWM 设备
         ,* @data: 指向芯片特定数据的指针
         ,*/
        int pwm_set_chip_data(struct pwm_device *pwm, void *data)
      #+end_src
      #+begin_src c


        struct pwm_device *of_pwm_xlate_with_flags(struct pwm_chip *pc,
                                                   const struct of_phandle_args *args);



        bool pwm_can_sleep(struct pwm_device *pwm);
        struct pwm_device *pwm_get(struct device *dev, const char *consumer);
        void pwm_add_table(struct pwm_lookup *table, size_t num);
      #+end_src
   4. PWM设备控制
      #+begin_src c
        /**
         ,* pwm_config() - 更改PWM设备配置
         ,* @pwm: PWM设备
         ,* @duty_ns: 占空比高电平时间(以纳秒为单位)
         ,* @period_ns: 占空比周期时间(以纳秒为单位)
         ,*/
        int pwm_config(struct pwm_device *pwm, int duty_ns, int period_ns)

        /**
         ,* pwm_set_polarity() - 配置PWM信号的极性
         ,* @pwm: PWM设备
         ,* @polarity: PWM信号的新极性
         ,*
         ,* NOTE:当PWM器件使能时,无法配置极性
         ,*/
        enum pwm_polarity {
      	  PWM_POLARITY_NORMAL, //高电平极性
      	  PWM_POLARITY_INVERSED,//低电平极性
        };
        int pwm_set_polarity(struct pwm_device *pwm, enum pwm_polarity polarity)

        /**
         ,* pwm_enable() - 启动PWM输出切换
         ,* @pwm: PWM设备
         ,*/
        int pwm_enable(struct pwm_device *pwm)

        /**
         ,* pwm_disable() - 停止PWM输出切换
         ,* @pwm: PWM设备
         ,*/
        void pwm_disable(struct pwm_device *pwm)

        /**
         ,* pwm_can_sleep() - 报告PWM访问是否睡眠
         ,* @pwm: PWM设备
         ,*
         ,**如果访问PWM可以休眠，返回true，否则为false。
         ,*/
        bool pwm_can_sleep(struct pwm_device *pwm)
      #+end_src
   5. 不知道干嘛用的
      #+begin_src c
        struct pwm_device *
        of_pwm_xlate_with_flags(struct pwm_chip *pc,
                                const struct of_phandle_args *args)
      #+end_src
      of_pwm_xlate_with_flags
* pwm平台相关
  pwm平台相关的内容是以高通平台msm8909平台进行研究的
** 总结
   + *Code*:\\
     kernel/drivers/pwm/pwm-qpnp.c\\
     kernel/include/linux/qpnp/pwm.h\\
   + *dts*:\\
     devicetree/bindings/leds/leds-qpnp.txt\\
   + *docs*:\\
   + *sysfs*:\\
     *sysfs*:\\
     *debugfs*:\\
     *proc*:\\
** 结构体
** pwm核心提供的API
   #+begin_src c
     /**
      ,* pwm_change_mode - 更改PWM模式配置
      ,* @pwm: the PWM device
      ,* @mode: 模式选择值PM_PWM_MODE_PWM,PM_PWM_MODE_LPG
      ,*        PWM模式，LPG模式
      ,*/
     int pwm_change_mode(struct pwm_device *pwm, enum pm_pwm_mode mode)

     /**
      ,* pwm_config_period - 改变PWM周期
      ,*
      ,* @pwm: the PWM device
      ,* @pwm_p: 周期 in struct qpnp_lpg_period
      ,*
      ,* NOTE: 这是通过改变PWM时钟频率,pwm精度来改变PWM周期的
      ,*/
     int pwm_config_period(struct pwm_device *pwm,
                           struct pwm_period_config *period)

     /**
      ,* pwm_config_pwm_value - 更改PWM器件配置
      ,* @pwm: the PWM device
      ,* @pwm_value: the duty cycle in raw PWM value (< 2^pwm_size)占空比原始值
      ,*
      ,* NOTE: pwm_value的范围在(0~2^pwm_size),该函数只改变占空比，不改变周期
      ,*/
     int pwm_config_pwm_value(struct pwm_device *pwm, int pwm_value)

     /**
      ,* pwm_config_us - 更改PWM器件配置
      ,* @pwm: the PWM device
      ,* @period_us: PWM周期以微秒为单位
      ,* @duty_us: 占空比微秒
      ,*
      ,* NOTE: 和pwm_config()功能一样
      ,*/
     int pwm_config_us(struct pwm_device *pwm, int duty_us, int period_us)

     /**
      ,* pwm_lut_config - change LPG LUT device configuration
      ,* @pwm: the PWM device
      ,* @period_us: PWM周期以微秒为单位
      ,* @duty_pct: 一系列占空比的百分比,例如20,50
      ,* @lut_params: 查找表参数
      ,*
      ,* NOTE:LUT Lookup table 显示查找表,
      ,*      LPG Light Pulse Generator  光脉冲发生器
      ,*/
     int pwm_lut_config(struct pwm_device *pwm, int period_us,
                        int duty_pct[], struct lut_params lut_params)
   #+end_src
* 总结
  #+begin_src
  PWM子系统由核心(core.c)框架和硬件相关驱动(pwm_xx.c),它们提供了驱动开发的一些必要API，core.c提供的是一些标准的API，而平台相关的pwm_xx.c根据芯片厂商的需求提供了一些额外的API
  #+end_src
