* 简介
  led框架支持电源管理,触发器,led闪烁
* 帮助文档
  + Doc
    kernel/Documentation/leds/leds-class.txt
  + sysfs
    /sys/class/leds/xx/brightness  用于设置亮度(0~max)
    /sys/class/leds/xx/max_brightness   设置最大亮度
    /sys/class/leds/xx/trigger          触发器led
    /sys/class/leds/xx/device
    /sys/class/leds/xx/power            电源部分
    /sys/class/leds/xx/pwm_us
    /sys/class/leds/xx/subsystem
    /sys/class/leds/xx/uevent            fasf
  + Code
    kernel/drivers/leds/led-class.c
    kernel/drivers/leds/led-core.c
    kernel/drivers/leds/led-triggers.c
    kernel/drivers/leds/leds.h
    kernel/include/linux/leds.h
* 关键结构体
** led_classdev
   #+begin_src cpp
     struct led_classdev {
         const char              *name;         //led设备名
         enum led_brightness      brightness;   //当前设备亮度
         enum led_brightness      max_brightness;//设备最大亮度
         enum led_brightness      usr_brightness_req;//要被设置的brightness
         int                      flags;            //是否支持休眠的标志

         /* Lower 16 bits reflect status */
     #define LED_SUSPENDED           (1 << 0)       //休眠状态
         /* Upper 16 bits reflect control information */
     #define LED_CORE_SUSPENDRESUME  (1 << 16)      //支持休眠唤醒
     #define LED_BLINK_ONESHOT       (1 << 17)      //led一次闪烁
     #define LED_BLINK_ONESHOT_STOP  (1 << 18)      //关掉一次闪烁
     #define LED_BLINK_INVERT        (1 << 19)      //闪烁倒置
     #define LED_SYSFS_DISABLE       (1 << 20)      //禁止led的sysfs

         /* Set LED brightness level */
         /* Must not sleep, use a workqueue if needed */
         /*设置led亮度，必须是非休眠状态，如果有必要就使用工作队列*/
         void            (*brightness_set)(struct led_classdev *led_cdev,
                                           enum led_brightness brightness);
         /* Get LED brightness level */
         /*获取led亮度值*/
         enum led_brightness (*brightness_get)(struct led_classdev *led_cdev);

         /*
          ,* Activate hardware accelerated blink, delays are in milliseconds
          ,* and if both are zero then a sensible default should be chosen.
          ,* The call should adjust the timings in that case and if it can't
          ,* match the values specified exactly.
          ,* Deactivate blinking again when the brightness is set to a fixed
          ,* value via the brightness_set() callback.
          ,*/
         int             (*blink_set)(struct led_classdev *led_cdev,
                                      unsigned long *delay_on,
                                      unsigned long *delay_off);

         struct device           *dev;              /*设备*/
         const struct attribute_group    **groups;  /*文件系统中的文件节点组,如/sys/class/led/xx/brightness*/

         struct list_head         node;                  /* LED Device list led设备链表，所有注册的led都在这*/
         const char              *default_trigger;       /* Trigger to use 默认触发器*/

         unsigned long            blink_delay_on, blink_delay_off;//闪烁开/关时间
         struct timer_list        blink_timer;      //闪烁定时器链表
         int                      blink_brightness; //闪烁的亮度

         struct work_struct      set_brightness_work; //设置led亮度的工作队列
         int                     delayed_set_value;   //设置延时值

     #ifdef CONFIG_LEDS_TRIGGERS
         /* Protects the trigger data below */
         struct rw_semaphore      trigger_lock;   /*触发器的读写信号锁*/

         struct led_trigger      *trigger;     /*led触发器*/
         struct list_head         trig_list;    /*led触发器链表*/
         void                    *trigger_data; /*触发器使用的私有数据*/
         /* true if activated - deactivate routine uses it to do cleanup */
         bool                    activated;    /*激活是true*/
     #endif

         /* Ensures consistent access to the LED Flash Class device */
         struct mutex            led_access;  /**/
     };
   #+end_src
** led_trigger
   #+begin_src c
     struct led_trigger {
         /* Trigger Properties 触发器属性*/
         const char       *name; //触发器名
         void            (*activate)(struct led_classdev *led_cdev);//触发器启用
         void            (*deactivate)(struct led_classdev *led_cdev);//触发器关闭

         /* LEDs under control by this trigger (for simple triggers) */
         /*由此触发器控制的LED（简单触发器）*/
         rwlock_t          leddev_list_lock;  /*读写锁*/
         struct list_head  led_cdevs;        /*触发器下的led设备链表*/

         /* Link to next registered trigger */
         struct list_head  next_trig;   /*当前触发器的下一个触发器*/
     };
   #+end_src
** led_info
   #+begin_src c
     struct led_info {
         const char      *name;
         const char      *default_trigger;
         int             flags;
     };
   #+end_src
** led_platform_data
   #+begin_src c
     struct led_platform_data {
         int             num_leds;
         struct led_info *leds;
     };
   #+end_src
** gpio_led
   #+begin_src c
     /* For the leds-gpio driver */
     struct gpio_led {
         const char *name;               //led名
         const char *default_trigger;    //默认触发器
         unsigned        gpio;           //gpio引脚
         unsigned        active_low : 1; //
         unsigned        retain_state_suspended : 1;
         unsigned        default_state : 2;
         /* default_state should be one of LEDS_GPIO_DEFSTATE_(ON|OFF|KEEP) */
     };
     #define LEDS_GPIO_DEFSTATE_OFF          0
     #define LEDS_GPIO_DEFSTATE_ON           1
     #define LEDS_GPIO_DEFSTATE_KEEP         2
   #+end_src
** gpio_led_platform_data
   #+begin_src c
     struct gpio_led_platform_data {
         int             num_leds;   //led个数
         const struct gpio_led *leds; //led

     #define GPIO_LED_NO_BLINK_LOW   0       /* No blink GPIO state low */
     #define GPIO_LED_NO_BLINK_HIGH  1       /* No blink GPIO state high */
     #define GPIO_LED_BLINK          2       /* Please, blink */
         int             (*gpio_blink_set)(unsigned gpio, int state,
                                           unsigned long *delay_on,
                                           unsigned long *delay_off);
     };
   #+end_src
   #+begin_src c
   #+end_src
* 关键API
** led_classdev_register
   #+begin_src c
     /**
      * led_classdev_register - register a new object of led_classdev class.
      * @parent: The device to register.
      * @led_cdev: the led_classdev structure for this device.
      */
     int led_classdev_register(struct device *parent, struct led_classdev *led_cdev);
   #+end_src
** led_classdev_unregister
   #+begin_src c
     /**
      * led_classdev_unregister - unregisters a object of led_properties class.
      * @led_cdev: the led device to unregister
      *
      * Unregisters a previously registered via led_classdev_register object.
      */
     void led_classdev_unregister(struct led_classdev *led_cdev)
   #+end_src
** led_classdev_suspend
   #+begin_src c
     /**
      * led_classdev_suspend - suspend an led_classdev.
      * @led_cdev: the led_classdev to suspend.
      */
     void led_classdev_suspend(struct led_classdev *led_cdev)
   #+end_src
** led_classdev_resume
   #+begin_src c
     /**
      * led_classdev_resume - resume an led_classdev.
      * @led_cdev: the led_classdev to resume.
      */
     void led_classdev_resume(struct led_classdev *led_cdev)
   #+end_src
   #+begin_src c
   #+end_src
**  led_blink_set
   #+begin_src c
     /**
      ,* led_blink_set - set blinking with software fallback
      ,* @led_cdev: the LED to start blinking
      ,* @delay_on: the time it should be on (in ms)
      ,* @delay_off: the time it should ble off (in ms)
      ,*
      ,* This function makes the LED blink, attempting to use the
      ,* hardware acceleration if possible, but falling back to
      ,* software blinking if there is no hardware blinking or if
      ,* the LED refuses the passed values.
      ,*
      ,* Note that if software blinking is active, simply calling
      ,* led_cdev->brightness_set() will not stop the blinking,
      ,* use led_classdev_brightness_set() instead.
      ,*/
     void led_blink_set(struct led_classdev *led_cdev,
                        unsigned long *delay_on,
                        unsigned long *delay_off);
   #+end_src
** led_blink_set_oneshot
   #+begin_src c
     /**
      ,* led_blink_set_oneshot - do a oneshot software blink
      ,* @led_cdev: the LED to start blinking
      ,* @delay_on: the time it should be on (in ms)
      ,* @delay_off: the time it should ble off (in ms)
      ,* @invert: blink off, then on, leaving the led on
      ,*
      ,* This function makes the LED blink one time for delay_on +
      ,* delay_off time, ignoring the request if another one-shot
      ,* blink is already in progress.
      ,*
      ,* If invert is set, led blinks for delay_off first, then for
      ,* delay_on and leave the led on after the on-off cycle.
      ,*/
     void led_blink_set_oneshot(struct led_classdev *led_cdev,
                                unsigned long *delay_on,
                                unsigned long *delay_off,
                                int invert);
   #+end_src
** led_set_brightness
   #+begin_src c
     /**
      ,* led_set_brightness - set LED brightness
      ,* @led_cdev: the LED to set
      ,* @brightness: the brightness to set it to
      ,*
      ,* Set an LED's brightness, and, if necessary, cancel the
      ,* software blink timer that implements blinking when the
      ,* hardware doesn't.
      ,*/
     void led_set_brightness(struct led_classdev *led_cdev,
                             enum led_brightness brightness);
   #+end_src
** led_update_brightness
   #+begin_src c
     /**
      ,* led_update_brightness - update LED brightness
      ,* @led_cdev: the LED to query
      ,*
      ,* Get an LED's current brightness and update led_cdev->brightness
      ,* member with the obtained value.
      ,*
      ,* Returns: 0 on success or negative error value on failure
      ,*/
     int led_update_brightness(struct led_classdev *led_cdev);
   #+end_src
** led_sysfs_disable
   #+begin_src c
     /**
      ,* led_sysfs_disable - disable LED sysfs interface
      ,* @led_cdev: the LED to set
      ,*
      ,* Disable the led_cdev's sysfs interface.
      ,*/
     void led_sysfs_disable(struct led_classdev *led_cdev);
   #+end_src
** led_sysfs_enable
   #+begin_src c
     /**
      ,* led_sysfs_enable - enable LED sysfs interface
      ,* @led_cdev: the LED to set
      ,*
      ,* Enable the led_cdev's sysfs interface.
      ,*/
     void led_sysfs_enable(struct led_classdev *led_cdev);
   #+end_src
** led_sysfs_is_disabled
   #+begin_src c
     /**
      * led_sysfs_is_disabled - check if LED sysfs interface is disabled
      * @led_cdev: the LED to query
      *
      * Returns: true if the led_cdev's sysfs interface is disabled.
      */
     static inline bool led_sysfs_is_disabled(struct led_classdev *led_cdev)
   #+end_src
** led_trigger_register/ led_trigger_unregister
   #+begin_src c
     /* Registration functions for complex triggers */
     extern int led_trigger_register(struct led_trigger *trigger);
     extern void led_trigger_unregister(struct led_trigger *trigger);
   #+end_src
** led_trigger_register_simple/led_trigger_unregister_simple
   #+begin_src c
     extern void led_trigger_register_simple(const char *name,
                                             struct led_trigger **trigger);
     extern void led_trigger_unregister_simple(struct led_trigger *trigger);
   #+end_src
** led_trigger_event
   #+begin_src c
     extern void led_trigger_event(struct led_trigger *trigger,
                                   enum led_brightness event);
   #+end_src
** led_trigger_blink
   #+begin_src c
     extern void led_trigger_blink(struct led_trigger *trigger,
                                   unsigned long *delay_on,
                                   unsigned long *delay_off);
   #+end_src
** led_trigger_blink_oneshot
   #+begin_src c
     extern void led_trigger_blink_oneshot(struct led_trigger *trigger,
                                           unsigned long *delay_on,
                                           unsigned long *delay_off,
                                           int invert);
   #+end_src
** ledtrig_ide_activity
   #+begin_src c
   extern void ledtrig_ide_activity(void);
   #+end_src
** ledtrig_flash_ctrl/ ledtrig_torch_ctrl
   #+begin_src c
     extern void ledtrig_flash_ctrl(bool on);
     extern void ledtrig_torch_ctrl(bool on);
   #+end_src
** gpio_led_register_device
   #+begin_src c
     /**
      ,* 平台设备驱动注册
      ,*/
     struct platform_device *gpio_led_register_device(
         int id, const struct gpio_led_platform_data *pdata);
   #+end_src
