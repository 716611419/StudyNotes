* LED简介
idol4项目中用到了3个驱动,
摄像头双flash(leds-qpnp-flash.c)
前置led(front_flash_idol4.c),
背光灯(leds-qpnp-wled.c)
* 参考文档
kernel/Documentation/devicetree/bindings/leds/leds-qpnp-flash.txt
代码:leds-qpnp-flash.c
dts:msm-pmi8950.dtsi
* 设备节点
/sys/class/leds
    led:flash_0
    led:flash_1
    led:torch_0
    led:torch_1
    led:switch
/sys/kernel/debug/flashLED
* 关键数据类型
  + qpnp_flash_led
    #+begin_src cpp
    struct qpnp_flash_led {
      struct spmi_device		*spmi_dev;
      struct flash_led_platform_data	*pdata;
      struct pinctrl			*pinctrl;
      struct pinctrl_state		*gpio_state_active;
      struct pinctrl_state		*gpio_state_suspend;
      struct flash_node_data		*flash_node;
      struct power_supply		*battery_psy;
      struct workqueue_struct		*ordered_workq;
      struct qpnp_vadc_chip		*vadc_dev;
      struct mutex			flash_led_lock;
      struct qpnp_flash_led_buffer	*log;
      struct dentry			*dbgfs_root;
      int				num_leds;
      u32				buffer_cnt;
      u16				base;
      u16				current_addr;
      u16				current2_addr;
      u8				peripheral_type;
      u8				fault_reg;
      bool				gpio_enabled;
      bool				charging_enabled;
      bool				strobe_debug;
      bool				dbg_feature_en;
    };
    #+end_src
  + flash_led_platform_data
    功能：配置flash led的数据
    #+begin_src cpp
    //该结构体的配置来源于设备树
    struct flash_led_platform_data {
      unsigned int			temp_threshold_num;
      unsigned int			temp_derate_curr_num;
      unsigned int			*die_temp_derate_curr_ma;
      unsigned int			*die_temp_threshold_degc;
      u16				ramp_up_step;
      u16				ramp_dn_step;
      u16				vph_pwr_droop_threshold;
      u16				headroom;
      u16				clamp_current;
      u8				thermal_derate_threshold;
      u8				vph_pwr_droop_debounce_time;
      u8				startup_dly;
      u8				thermal_derate_rate;
      bool				pmic_charger_support;
      bool				self_check_en;
      bool				thermal_derate_en;
      bool				current_ramp_en;
      bool				vph_pwr_droop_en;
      bool				hdrm_sns_ch0_en;
      bool				hdrm_sns_ch1_en;
      bool				power_detect_en;
      bool				mask3_en;
      bool				follow_rb_disable;
      bool				die_current_derate_en;
    };
    #+end_src
  + flash_node_data
    每个led的配置
    #+begin_src cpp
    struct flash_node_data {
        struct spmi_device		*spmi_dev;
        struct led_classdev		cdev;
        struct work_struct		work;
        struct flash_regulator_data	*reg_data;
        u16				max_current;  //最大电量
        u16				prgm_current;
        u16				prgm_current2;
        u16				duration;
        u8				id;
        u8				type;
        u8				trigger;
        u8				enable;
        u8				num_regulators;
        bool			flash_on;
    };
    #+end_src
* 设备树
#+begin_src cpp
flash_led: qcom,leds@d300 {
    compatible = "qcom,qpnp-flash-led";
    status = "okay";
    reg = <0xd300 0x100>;
    label = "flash";
    qcom,headroom = <500>;
    qcom,startup-dly = <128>;
    qcom,clamp-curr = <200>;
    qcom,pmic-charger-support;
    qcom,self-check-enabled;
    qcom,thermal-derate-enabled;
    qcom,thermal-derate-threshold = <100>;
    qcom,thermal-derate-rate = "5_PERCENT";
    qcom,current-ramp-enabled;
    qcom,ramp_up_step = "6P7_US";
    qcom,ramp_dn_step = "6P7_US";
    qcom,vph-pwr-droop-enabled;
    qcom,vph-pwr-droop-threshold = <3000>;
    qcom,vph-pwr-droop-debounce-time = <10>;
    qcom,headroom-sense-ch0-enabled;
    qcom,headroom-sense-ch1-enabled;

    pmi8950_flash0: qcom,flash_0 {
            label = "flash";
            qcom,led-name = "led:flash_0";
            qcom,default-led-trigger =
                            "flash0_trigger";
            qcom,max-current = <1000>;
            qcom,duration = <1280>;
            qcom,id = <0>;
            qcom,current = <625>;
    };

    pmi8950_flash1: qcom,flash_1 {
            label = "flash";
            qcom,led-name = "led:flash_1";
            qcom,default-led-trigger =
                            "flash1_trigger";
            qcom,max-current = <1000>;
            qcom,duration = <1280>;
            qcom,id = <1>;
            qcom,current = <625>;
    };
    pmi8950_torch0: qcom,torch_0 {
            label = "torch";
            qcom,led-name = "led:torch_0";
            qcom,default-led-trigger =
                            "torch0_trigger";
            qcom,max-current = <200>;
            qcom,id = <0>;
            qcom,current = <120>;
    };

    pmi8950_torch1: qcom,torch_1 {
            label = "torch";
            qcom,led-name = "led:torch_1";
            qcom,default-led-trigger =
                            "torch1_trigger";
            qcom,max-current = <200>;
            qcom,id = <1>;
            qcom,current = <120>;
    };

    pmi8950_switch: qcom,switch {
            label = "switch";
            qcom,led-name = "led:switch";
            qcom,default-led-trigger =
                            "switch_trigger";
            qcom,max-current = <1000>;
            qcom,duration = <1280>;
            qcom,id = <2>;
            qcom,current = <625>;
            reg0 {
                    regulator-name = "pon_spare_reg";
            };
    };
};
#+end_src
* leds-qpnp-flash.c
**
** led注册/注销
#+begin_src cpp
static int __init qpnp_flash_led_init(void)
{
  //注册驱动
  return spmi_driver_register(&qpnp_flash_led_driver);
}
late_initcall(qpnp_flash_led_init);

static void __exit qpnp_flash_led_exit(void)
{
  //注销驱动
  spmi_driver_unregister(&qpnp_flash_led_driver);
}
#+end_src
** qpnp_flash_led_probe
#+begin_src cpp
static int qpnp_flash_led_probe(struct spmi_device *spmi)
{

//获取设备节点
node = spmi->dev.of_node;

//获取内存资源
flash_resource = spmi_get_resource(spmi, 0, IORESOURCE_MEM, 0);

//分配内存
led = devm_kzalloc(&spmi->dev, sizeof(struct qpnp_flash_led), GFP_KERNEL);

//led寄存器基地址
led->base = flash_resource->start;
led->spmi_dev = spmi;

//led[0-1]电流相关的寄存器
led->current_addr = FLASH_LED0_CURRENT(led->base);   //=base + 0x42
led->current2_addr = FLASH_LED1_CURRENT(led->base);  //=base + 0x43

//为flash led分配配置相关的结构体内存
led->pdata = devm_kzalloc(&spmi->dev, sizeof(struct flash_led_platform_data), GFP_KERNEL);

//获取外设类型
led->peripheral_type = (u8)qpnp_flash_led_get_peripheral_type(led);

//设备树解析
rc = qpnp_flash_led_parse_common_dt(led, node);

//led初始化设置
rc = qpnp_flash_led_init_settings(led);
}
#+end_src
** qpnp_flash_led_parse_common_dt()
#+begin_src cpp
static int qpnp_flash_led_parse_common_dt(struct qpnp_flash_led *led, struct device_node *node)
{
//led->pdata->headroom = 500;
led->pdata->headroom = FLASH_LED_HEADROOM_DEFAULT_MV;
//val = 500
rc = of_property_read_u32(node, "qcom,headroom", &val);
//led->pdata->headroom = 500;
led->pdata->headroom = (u16)val;

//led->pdata->startup_dly = 128 启动延时
led->pdata->startup_dly = FLASH_LED_STARTUP_DELAY_DEFAULT_US;
//val=128
rc = of_property_read_u32(node, "qcom,startup-dly", &val);
led->pdata->startup_dly = (u8)val;

//led->pdata->clamp_current = 200
led->pdata->clamp_current = FLASH_LED_CLAMP_CURRENT_DEFAULT_MA;
rc = of_property_read_u32(node, "qcom,clamp-current", &val);//该属性不存在

//led->pdata->pmic_charger_support = true;
led->pdata->pmic_charger_support = of_property_read_bool(node, "qcom,pmic-charger-support");

//led->pdata->self_check_en = true
led->pdata->self_check_en = of_property_read_bool(node, "qcom,self-check-enabled");

//led->pdata->thermal_derate_en = true;
led->pdata->thermal_derate_en = of_property_read_bool(node, "qcom,thermal-derate-enabled");
if (led->pdata->thermal_derate_en) {
      //led->pdata->thermal_derate_rate = 2;
      led->pdata->thermal_derate_rate = FLASH_LED_THERMAL_DERATE_RATE_DEFAULT_PERCENT;
      //temp = "5_PERCENT"
      rc = of_property_read_string(node, "qcom,thermal-derate-rate", &temp);
      if (!rc) {

        //temp_val = RATE_5_PERCENT = 4;
        temp_val = qpnp_flash_led_get_thermal_derate_rate(temp);

        //led->pdata->thermal_derate_rate = 4;
        led->pdata->thermal_derate_rate = (u8)temp_val;
      }

      //led->pdata->thermal_derate_threshold = 80
      led->pdata->thermal_derate_threshold = FLASH_LED_THERMAL_DERATE_THRESHOLD_DEFAULT_C;
      //该属性不存在
      rc = of_property_read_u32(node, "qcom,thermal-derate-threshold", &val);
      if (!rc)
        led->pdata->thermal_derate_threshold = (u8)val;
  }

  //led->pdata->current_ramp_en = true;
  led->pdata->current_ramp_en = of_property_read_bool(node, "qcom,current-ramp-enabled");
  if (led->pdata->current_ramp_en) {
      //led->pdata->ramp_up_step = 3200
      led->pdata->ramp_up_step = FLASH_LED_RAMP_UP_STEP_DEFAULT_US;
      //temp = "6P7_US"
      rc = of_property_read_string(node, "qcom,ramp_up_step", &temp);
      if (!rc) {

        //temp_val = RAMP_STEP_6P7_US = 5
        temp_val = qpnp_flash_led_get_ramp_step(temp);
        //led->pdata->ramp_up_step = 5
        led->pdata->ramp_up_step = (u8)temp_val;
      }

      //led->pdata->ramp_dn_step = 3
      led->pdata->ramp_dn_step = FLASH_LED_RAMP_DN_STEP_DEFAULT_US;
      //temp = "6P7_US"
      rc = of_property_read_string(node, "qcom,ramp_dn_step", &temp);
      if (!rc) {
        //temp_val = RAMP_STEP_6P7_US =5
        temp_val = qpnp_flash_led_get_ramp_step(temp);
        //led->pdata->ramp_dn_step = 5;
        led->pdata->ramp_dn_step = (u8)temp_val;
      }
  }


  //led->pdata->vph_pwr_droop_en = ture;
  led->pdata->vph_pwr_droop_en = of_property_read_bool(node, "qcom,vph-pwr-droop-enabled");
    if (led->pdata->vph_pwr_droop_en) {
      //led->pdata->vph_pwr_droop_threshold = 3200
      led->pdata->vph_pwr_droop_threshold = FLASH_LED_VPH_PWR_DROOP_THRESHOLD_DEFAULT_MV;
      //3000
      rc = of_property_read_u32(node, "qcom,vph-pwr-droop-threshold", &val);
      if (!rc) {
         //=3000
        led->pdata->vph_pwr_droop_threshold = (u16)val;
      }

      //led->pdata->vph_pwr_droop_debounce_time = 10
      led->pdata->vph_pwr_droop_debounce_time = FLASH_LED_VPH_PWR_DROOP_DEBOUNCE_TIME_DEFAULT_US;
      //=10
      rc = of_property_read_u32(node, "qcom,vph-pwr-droop-debounce-time", &val);
      if (!rc)
        //=10
        led->pdata->vph_pwr_droop_debounce_time = (u8)val;
  }


  // = ture
  led->pdata->hdrm_sns_ch0_en = of_property_read_bool(node, "qcom,headroom-sense-ch0-enabled");
  // = ture
  led->pdata->hdrm_sns_ch1_en = of_property_read_bool(node, "qcom,headroom-sense-ch1-enabled");
  //= false
  led->pdata->power_detect_en = of_property_read_bool(node, "qcom,power-detect-enabled");
  //= false
  led->pdata->mask3_en = of_property_read_bool(node, "qcom,otst2-module-enabled");
  //= false
  led->pdata->follow_rb_disable = of_property_read_bool(node, "qcom,follow-otst2-rb-disabled");
  //= false
  led->pdata->die_current_derate_en = of_property_read_bool(node, "qcom,die-current-derate-enabled");
  if (led->pdata->die_current_derate_en) {
  .... //本平台没有省略
  }

  led->pinctrl = devm_pinctrl_get(&led->spmi_dev->dev);
  if (IS_ERR_OR_NULL(led->pinctrl)) {
    dev_err(&led->spmi_dev->dev, "Unable to acquire pinctrl\n");
    led->pinctrl = NULL;
    return 0;
  } else {
    led->gpio_state_active = pinctrl_lookup_state(led->pinctrl, "flash_led_enable");
    if (IS_ERR_OR_NULL(led->gpio_state_active)) {
      dev_err(&led->spmi_dev->dev, "Can not lookup LED active state\n");
      devm_pinctrl_put(led->pinctrl);
      led->pinctrl = NULL;
      return PTR_ERR(led->gpio_state_active);
    }
    led->gpio_state_suspend = pinctrl_lookup_state(led->pinctrl, "flash_led_disable");
    if (IS_ERR_OR_NULL(led->gpio_state_suspend)) {
      dev_err(&led->spmi_dev->dev,
        "Can not lookup LED disable state\n");
      devm_pinctrl_put(led->pinctrl);
      led->pinctrl = NULL;
      return PTR_ERR(led->gpio_state_suspend);
    }
  }

}
#+end_src
