总体知识比较多且繁杂，把握重点，不重要的千万不要是死扣
arm学习方法:理清关键知识点，借鉴别人的代码
arm自己的特点（底层程序特点）：时刻要注意理解硬件的行为

底层的汇编程序有什么用处，是否可以不去学习汇编：为后面能够使用C语言做好环境的搭建
  ---初始化硬件方面：初始化你的clock，sdram，串口（调试底层），重定位你的代码到链接地址
			
  ---软件方面：每个异常都要有各自的处理函数，分配自己的栈
  
1.  异常处理
	1）异常向量表  --》 每一个表项就是一类异常的总入口地址，如某一irq类的中断源产生了中断，由cpu自动跳转到
	0x18，在0x18上实际上只能放一条跳转指令，如调到irq_handler这个标号（地址的别名），真正需要做的处理
	放到那个标号以后的代码如do_irq函数去做。由于我们的4412是支持非向量中断的方式，所以我们需要在do_irq
	函数里按照中断号的不同进行第二次判断并处理。
	2）处理过程  --》（四大步三小步）
	a）硬件自动帮我们完成的有：
		i 当前模式的cpsr-》spsr
		ii 保存下一条指令的地址到lr
		iii调到对应模式的异常向量表的表项的地址值
		iv 设置你要切换到的模式的cpsr值：
		     ；屏蔽掉中断（这一步根据项目需求灵活设置）
			 更改cpsr值以切换到对应模式
			 设置到arm模式
	
	b）软件工程师需要做的是哪些？
	   i  在0x18上放一条跳转指令 
	   ii 在你放的那条指令的标号上进一步写你的中断处理函数

	3）如何返回（所有事项必须由人来做）
	a）spsr--》cpsr
	   由内到外清除各类中断标志位
	   问：为什么要清除中断标志位？保证下一次中断产生时能够被cpu检测到
	b）调整lr值并返回到之前的模式（根据4412相关文档或流水线具体技术确定）
		
	
2.两个重要概念的含义：进程上下文（你的用户main程序）  vs   中断上下文（对应你的usr模式和异常模式如irq模式）
	reset时，cpu处于svc模式，arm状态
	
	引申：在汇编程序处理各类异常返回时必须在出栈的同时切换到你原来模式即user模式（^,movs,subs），
	所以我们才能够继续回到user模式下的进程上下文执行下一条语句
	
	中断上下文：实际上就是中断处理函数，如void do_irq(void)
	
	问：程序何时能进入到你的中断上下文中执行，即何时跳转到void do_irq(void)？
		以adc中断（它属于内部中断）为例说明
	
	问：进入到void do_irq(void)，意味着硬件发生了哪些行为？adc硬件已经完成本次的转换
	
3.  内部中断 vs  外部中断在中断处理函数的配置步骤
	（按照是否存在于soc如4412内部还是外部来划分）
	外部中断：按键中断为例
		配置步骤--》（程式化的）
	a） 关于gpio的
        i） 通过相应的gpio的寄存器来配置成中断方式，
		ii）根据4412手册的ch6.2配置中断的触发方式（上拉/下拉禁止、引脚滤波）	
	b） 关于gic的
		i）使能gic
		ii）分配器，分配哪个cpu来处理这个中断
	c） 关于cpu接口的
		i）  使能（最后一道开关，总的使能）
		ii） 设置中断优先级，默认255
	d） 清除中断的步骤（需要获得中断号，在CPU0.ICCIAR 保留）
		gpio  +  gic    +  这个中断（CPU0.ICCEOIR = (CPU0.ICCEOIR & ~(0x1FF)) | irq_num）  
		
	内部中断：adc为例
      （不管你在程序中是否用中断的方式处理事务，
        adc硬件都会在本次转换完成的时刻产生中断，你用不用这个中断是你的自由）
		配置步骤--》（程式化的）
	a）gic的
	b）cpu接口的
	c）清除中断的步骤
	   gic    +    这个中断（如清除adc中断需要在介绍adc的第56章给出的寄存器找相应寄存器：4412手册第56.7.4.1节）
		
4.	4412 中断源 vs gic管理方式：
	内部中断  +   外部中断    （划分的方式按照是否位于4412等soc里面）
	spi       +   ppi  +  sgi  （4412中所有中断的处理是交给gic来管理的，gic按照中断是否是某一个cpu
	                             独有的划分为spi+ppi）
	如：adc中断：  内部中断 且是 spi中断
	如：按键中断： 外部中断 且是 spi中断
	
5.  关于gpio功能复用的说明
	4412的每一个gpio管脚都有很多功能，称之为功能复用
	问：XEINT_0  GPX0[0]/WAKEUP_INT0[0]/AUD_TCK/GNSS_TCK/ALV_TCK如何理解？
		中断类型 gpio名称  中断的名称           gps，如果需要外接gps芯片，请接到这个gpio上
	问：我们在某一项目中如何知道到底配置成哪种方式来使用该gpio？
	结合硬件设计来确定，如某一gpio与led灯在电路板上相连，我们肯定要使用输出模式
	

6.  关于arm裸板程序开发流程的说明
	a）和做纯软件的流程不一样的！
	b）coreboard原理图  devboard原理图  4412用户手册   6050的手册  6050的reg-map   上网查找iic读写等协议
	c）根据coreboard原理图，devboard原理图根据网络标志符按图索骥，最终查到4412用户手册相关寄存器说明
	

7.  如何在现有工程代码等相关资料的条件下快速进行下一个外设功能的开发
	（可以继承的部分）
	（少量修改可以为我所用的部分）
	（该外设特有的，完全要添加的部分即自由发挥的）
	我们做项目时，写代码时要有软件分层架构的思想
	如：我们在iic程序的时候将有关iic控制器的设置抽象为一个函数，iic读写分别抽象为一个函数。
	
	
	