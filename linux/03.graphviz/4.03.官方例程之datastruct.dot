/*
* 点的参数
        shape
            record     由横的和竖的矩形组成的图形
	    Mrecord    角是圆的，看例题
	    polygon    多边形
	    plaintext
	    box
	    Mdiamond
	    Msquare
	rankdir       默认时图中的线是从上到下的，值：LR，RL，TB(默认)，BT   
	sides 设置边数
	peripheries 设置多边形的外框的层数
	regular = true可以让多边形是一个规则的多边形
	orientation=15 可以让你的多边形旋转一个角度 如15度
	color
	style
	skew 值-1.0～1.0能让多边形斜切一个角度
	label
	distortion 让图形产生透视效果
	
	decorate      决定每条线的label与所属线的连接值：true,false
	labelfontcolor决定headlabel和taillabel的颜色
	fontcolor     决定label颜色
	headlabel     起始点标签
	taillabel     终点标签
	label         标签
	rank       当图中时间表之类的东西时，我们会需要点能排在一行（列），这时要用到rank，用花括号把rank=same然后把需要并排的点一次输入          

	width   宽
	height  高
	nodesep


	画一个子图 subgraph 

	compound 把一条边连到一个子图的边界上，先输入compound = true,然后就能用lhead和ltail来设置连接的子图了
* 
*
****/
/*
设立一条边时，我们可以制定这条边从起点的那个位置射出和从哪个位置结束。控制符有
"n", "ne","e", "se", "s", "sw", "w" 和"nw"，具体效果见下：
n是北；s是南；w是西；e是东

也可以在record/Mrecord中给点定义一些port，因为record类型中都是一个个格子


*/
/*
Data Structures

    The graph file was generated automatically from a session with the LDBX graphical interface to the standard DBX debugger. Nodes are drawn with the 'record' shape. Labels of this shape are interpreted specially as nested horizontal and vertical box lists formatted as tables. In a record label, curly braces { } enclose lists, vertical bar | separates list items, and creates a port identifier for attaching edges. Edges are also labeled with 'id' attributes. Though not demonstrated in this particular file, these attributes allow referencing multiple (parallel) edges between the same node pair. 
*/
digraph g {
	graph [
	       rankdir = "LR"
	       ];
	node [
	      fontsize = "16"
	      shape = "ellipse"
	      ];
	edge [
	      ];
	"node0" [
		 label = "<f0> 0x10ba8| <f1>"
		 shape = "record"
		 ];
	"node1" [
		 label = "<f0> 0xf7fc4380| <f1> | <f2> |-1"
		 shape = "record"
		 ];
	"node2" [
		 label = "<f0> 0xf7fc44b8| | |2"
		 shape = "record"
		 ];
	"node3" [
		 label = "<f0> 3.43322790286038071e-06|44.79998779296875|0"
		 shape = "record"
		 ];
	"node4" [
	 label = "<f0> 0xf7fc4380| <f1> | <f2> |2"
	 shape = "record"
	 ];
	"node5" [
		 label = "<f0> (nil)| | |-1"
		 shape = "record"
		 ];
	"node6" [
		 label = "<f0> 0xf7fc4380| <f1> | <f2> |1"
		 shape = "record"
		 ];
	"node7" [
		 label = "<f0> 0xf7fc4380| <f1> | <f2> |2"
		 shape = "record"
		 ];
	"node8" [
		 label = "<f0> (nil)| | |-1"
		 shape = "record"
		 ];
	"node9" [
		 label = "<f0> (nil)| | |-1"
		 shape = "record"
		 ];
	"node10" [
		  label = "<f0> (nil)| <f1> | <f2> |-1"
		  shape = "record"
		  ];
	"node11" [
		  label = "<f0> (nil)| <f1> | <f2> |-1"
		  shape = "record"
		  ];
	"node12" [
		  label = "<f0> 0xf7fc43e0| | |1"
		  shape = "record"
		  ];
	"node0":f0 -> "node1":f0 [
				  id = 0
				  ];
	"node0":f1 -> "node2":f0 [
				  id = 1
				  ];
	"node1":f0 -> "node3":f0 [
				  id = 2
				  ];
	"node1":f1 -> "node4":f0 [
				  id = 3
				  ];
	"node1":f2 -> "node5":f0 [
				  id = 4
				  ];
	"node4":f0 -> "node3":f0 [
				  id = 5
				  ];
	"node4":f1 -> "node6":f0 [
				  id = 6
				  ];
	"node4":f2 -> "node10":f0 [
				   id = 7
				   ];
	"node6":f0 -> "node3":f0 [
				  id = 8
				  ];
	"node6":f1 -> "node7":f0 [
				  id = 9
				  ];
	"node6":f2 -> "node9":f0 [
				  id = 10
				  ];
	"node7":f0 -> "node3":f0 [
				  id = 11
				  ];
	"node7":f1 -> "node1":f0 [
				  id = 12
				  ];
	"node7":f2 -> "node8":f0 [
				  id = 13
				  ];
	"node10":f1 -> "node11":f0 [
				    id = 14
				    ];
	"node10":f2 -> "node12":f0 [
				    id = 15
				    ];
	"node11":f2 -> "node1":f0 [
				   id = 16
				   ];
			   }
			   
